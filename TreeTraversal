// "static void main" must be defined in a public class.
public class Main {    
    static class TreeNode{
        int data;
        TreeNode left, right;        
        TreeNode(int data){
            this.data = data;
            this.left=this.right=null;
        }
    }
    
    public static TreeNode createBinaryTree()
	{
		TreeNode rootNode =new TreeNode(40);
        TreeNode node20=new TreeNode(20);
        TreeNode node10=new TreeNode(10);
        TreeNode node30=new TreeNode(30);	
        TreeNode node60=new TreeNode(60);
        TreeNode node50=new TreeNode(50);
        TreeNode node70=new TreeNode(70);
 		rootNode.left=node20;
        rootNode.right=node60;	
        node20.left=node10;	
        node20.right=node30;
        node60.left=node50;	
        node60.right=node70;
 		return rootNode;
	}
    
    public static int returnMaxVal(TreeNode root){
      int max=0,value=0,left=0,right = 0;
      if(root!=null){
            value = root.data;
            left= returnMaxVal(root.left);
            right = returnMaxVal(root.right);
           if(left>right){
                max = left;            
            }else{
                max=right;
            }
            if(max<value){
                max = value;
            }
        }
        return max;
    }
    

    
    public static int inOrderTraverse(TreeNode root){
        if(root==null){
            return 0;
        }else{
            inOrderTraverse(root.left);
            System.out.println("In order Data--->"+root.data);
            inOrderTraverse(root.right);
        }
        return 1;
    }
    
     public static int postOrderTraverse(TreeNode root){
        if(root==null){
            return 0;
        }else{
            postOrderTraverse(root.left);            
            postOrderTraverse(root.right);
            System.out.println("Post Order Data--->"+root.data);
        }
        return 1;
    }
    
    public static int preOrderTraverse(TreeNode root){
        if(root==null){
            return 0;
        }else{
            System.out.println("Pre Order Data--->"+root.data);
            preOrderTraverse(root.left);            
            preOrderTraverse(root.right);           
        }
        return 1;
    }
    
    public static void main(String[] args) {
        System.out.println("Hello to Tree World!");      
        TreeNode rootNode=createBinaryTree();
        inOrderTraverse(rootNode);
        postOrderTraverse(rootNode);
        preOrderTraverse(rootNode);
        System.out.println("Return Max Value===>"+returnMaxVal(rootNode));
        
    }
}
